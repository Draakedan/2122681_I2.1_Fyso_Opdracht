// <auto-generated />
using System;
using DatabaseHandler.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseHandler.Migrations
{
    [DbContext(typeof(FysioDataContext))]
    [Migration("20220329093208_FotoUrl")]
    partial class FotoUrl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainModels.Models.ActionPlan", b =>
                {
                    b.Property<int>("ActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SessionsPerWeek")
                        .HasColumnType("int");

                    b.Property<int>("TimePerSession")
                        .HasColumnType("int");

                    b.HasKey("ActionID");

                    b.ToTable("ActionPlans");
                });

            modelBuilder.Entity("DomainModels.Models.Adress", b =>
                {
                    b.Property<int>("AdressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdressID");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("DomainModels.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentMadeByFysioWorkerID")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommenterID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateMade")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientFileID")
                        .HasColumnType("int");

                    b.Property<bool>("VisibleToPatient")
                        .HasColumnType("bit");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentMadeByFysioWorkerID");

                    b.HasIndex("PatientFileID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DomainModels.Models.FysioWorker", b =>
                {
                    b.Property<int>("FysioWorkerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BIGNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FysioWorkerID");

                    b.ToTable("FysioWorkers");
                });

            modelBuilder.Entity("DomainModels.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdressID")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnsuranceCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientID");

                    b.HasIndex("AdressID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DomainModels.Models.PatientFile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionPlanActionID")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CommentIDs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnoseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnoseCodeComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdactionPlan")
                        .HasColumnType("int");

                    b.Property<int>("IdintakeSuppervisedBy")
                        .HasColumnType("int");

                    b.Property<int>("IdmainTherapist")
                        .HasColumnType("int");

                    b.Property<int>("IntakeDoneByID")
                        .HasColumnType("int");

                    b.Property<int?>("IntakeSuppervisedByFysioWorkerID")
                        .HasColumnType("int");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<string>("IssueDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MainTherapistFysioWorkerID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionIDs")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ActionPlanActionID");

                    b.HasIndex("IntakeDoneByID");

                    b.HasIndex("IntakeSuppervisedByFysioWorkerID");

                    b.HasIndex("MainTherapistFysioWorkerID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientFiles");
                });

            modelBuilder.Entity("DomainModels.Models.TherapySession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPractiseRoom")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientFileID")
                        .HasColumnType("int");

                    b.Property<int?>("SesionDoneByFysioWorkerID")
                        .HasColumnType("int");

                    b.Property<int>("SessionDoneByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SessionEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SessionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Specials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientFileID");

                    b.HasIndex("SesionDoneByFysioWorkerID");

                    b.ToTable("TherapySessions");
                });

            modelBuilder.Entity("DomainModels.Models.Comment", b =>
                {
                    b.HasOne("DomainModels.Models.FysioWorker", "CommentMadeBy")
                        .WithMany()
                        .HasForeignKey("CommentMadeByFysioWorkerID");

                    b.HasOne("DomainModels.Models.PatientFile", null)
                        .WithMany("Comments")
                        .HasForeignKey("PatientFileID");

                    b.Navigation("CommentMadeBy");
                });

            modelBuilder.Entity("DomainModels.Models.Patient", b =>
                {
                    b.HasOne("DomainModels.Models.Adress", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("DomainModels.Models.PatientFile", b =>
                {
                    b.HasOne("DomainModels.Models.ActionPlan", "ActionPlan")
                        .WithMany()
                        .HasForeignKey("ActionPlanActionID");

                    b.HasOne("DomainModels.Models.FysioWorker", "IntakeDoneBy")
                        .WithMany()
                        .HasForeignKey("IntakeDoneByID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModels.Models.FysioWorker", "IntakeSuppervisedBy")
                        .WithMany()
                        .HasForeignKey("IntakeSuppervisedByFysioWorkerID");

                    b.HasOne("DomainModels.Models.FysioWorker", "MainTherapist")
                        .WithMany()
                        .HasForeignKey("MainTherapistFysioWorkerID");

                    b.HasOne("DomainModels.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionPlan");

                    b.Navigation("IntakeDoneBy");

                    b.Navigation("IntakeSuppervisedBy");

                    b.Navigation("MainTherapist");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DomainModels.Models.TherapySession", b =>
                {
                    b.HasOne("DomainModels.Models.PatientFile", null)
                        .WithMany("Sessions")
                        .HasForeignKey("PatientFileID");

                    b.HasOne("DomainModels.Models.FysioWorker", "SesionDoneBy")
                        .WithMany()
                        .HasForeignKey("SesionDoneByFysioWorkerID");

                    b.Navigation("SesionDoneBy");
                });

            modelBuilder.Entity("DomainModels.Models.PatientFile", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
